# -*- coding: utf-8 -*-
"""
Created on Thu Mar 23 14:31:11 2023

@author: Razer Blade
"""
import math 

import matplotlib.pyplot as plt


pointsss = [(0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (-49.11, 53.82),
 (-49.11, 53.82),
 (-49.11, 53.82),
 (-49.11, 53.82),
 (-53.82, 53.82),
 (-53.82, -3.82),
 (3.82, -3.82),
 (3.82, -3.82),
 (3.82, -3.82),
 (-2.18, 2.18),
 (-2.18, 2.18),
 (-2.18, 2.18),
 (-2.18, 12.18),
 (-2.18, 22.18),
 (-2.18, 32.18),
 (-2.18, 42.18),
 (-2.18, 47.82),
 (-6.53, 47.82),
 (-47.82, 47.82),
 (-47.82, 2.18),
 (-2.18, 2.18),
 (-2.18, 2.18),
 (-1.78, 1.78),
 (-1.78, 1.78),
 (-1.78, 1.78),
 (-1.78, 48.22),
 (-48.22, 48.22),
 (-48.22, 1.78),
 (-11.88, 1.78)]
 

points = [(0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (0, 0),
 (-49.11, 53.82),
 (-49.11, 53.82),
 (-49.11, 53.82),
 (-49.11, 53.82),
 (-53.82, 53.82),
 (-53.82, -3.82),
 (3.82, -3.82),
 (3.82, -3.82),
 (3.82, -3.82),
 (-2.18, 2.18),
 (-2.18, 2.18),
 (-2.18, 2.18),
 (-2.18, 12.18),
 (-2.18, 22.18),
 (-2.18, 32.18),
 (-2.18, 42.18),
 (-2.18, 47.82),
 (-6.53, 47.82),
 (-47.82, 47.82),
 (-47.82, 2.18),
 (-2.18, 2.18),
 (-2.18, 2.18),
 (-1.78, 1.78),
 (-1.78, 1.78),
 (-1.78, 1.78),
 (-1.78, 48.22),
 (-48.22, 48.22),
 (-48.22, 1.78),
 (-11.88, 1.78),
 (-9.88, 1.78),
 (-7.88, 1.78),
 (-5.87, 1.78),
 (-3.87, 1.78),
 (-1.88, 1.78),
 (-1.38, 1.38),
 (-1.38, 48.62),
 (-48.62, 48.62),
 (-48.62, 1.38),
 (-1.48, 1.38),
 (-1.88, 1.78),
 (-1.88, 1.78),
 (-2.52, 3.06),
 (-2.52, 3.06),
 (-2.52, 3.06),
 (-3.06, 2.52),
 (-3.63, 2.52),
 (-2.52, 3.63),
 (-2.52, 4.19),
 (-4.19, 2.52),
 (-4.76, 2.52),
 (-2.52, 4.76),
 (-2.52, 5.32),
 (-5.32, 2.52),
 (-5.89, 2.52),
 (-2.52, 5.89),
 (-2.52, 6.46),
 (-6.46, 2.52),
 (-7.02, 2.52),
 (-2.52, 7.02),
 (-2.52, 7.59),
 (-7.59, 2.52),
 (-8.15, 2.52),
 (-2.52, 8.15),
 (-2.52, 8.72),
 (-8.72, 2.52),
 (-9.28, 2.52),
 (-2.52, 9.28),
 (-2.52, 9.85),
 (-9.85, 2.52),
 (-10.41, 2.52),
 (-2.52, 10.42),
 (-2.52, 10.98),
 (-10.98, 2.52),
 (-11.55, 2.52),
 (-2.52, 11.55),
 (-2.52, 12.11),
 (-12.11, 2.52),
 (-12.68, 2.52),
 (-2.52, 12.68),
 (-2.52, 13.24),
 (-13.24, 2.52),
 (-13.81, 2.52),
 (-2.52, 13.81),
 (-2.52, 14.38),
 (-14.37, 2.52),
 (-14.94, 2.52),
 (-2.52, 14.94),
 (-2.52, 15.51),
 (-15.51, 2.52),
 (-16.07, 2.52),
 (-2.52, 16.07),
 (-2.52, 16.64),
 (-16.64, 2.52),
 (-17.2, 2.52),
 (-2.52, 17.2),
 (-2.52, 17.77),
 (-17.77, 2.52),
 (-18.33, 2.52),
 (-2.52, 18.33),
 (-2.52, 18.9),
 (-18.9, 2.52),
 (-19.47, 2.52),
 (-2.52, 19.47),
 (-2.52, 20.03),
 (-20.03, 2.52),
 (-20.6, 2.52),
 (-2.52, 20.6),
 (-2.52, 21.16),
 (-21.16, 2.52),
 (-21.73, 2.52),
 (-2.52, 21.73),
 (-2.52, 22.3),
 (-22.29, 2.52),
 (-22.86, 2.52),
 (-2.52, 22.86),
 (-2.52, 23.43),
 (-23.43, 2.52),
 (-23.99, 2.52),
 (-2.52, 23.99),
 (-2.52, 24.56),
 (-24.56, 2.52),
 (-25.12, 2.52),
 (-2.52, 25.12),
 (-2.52, 25.69),
 (-25.69, 2.52),
 (-26.25, 2.52),
 (-2.52, 26.25),
 (-2.52, 26.82),
 (-26.82, 2.52),
 (-27.39, 2.52),
 (-2.52, 27.39),
 (-2.52, 27.95),
 (-27.95, 2.52),
 (-28.52, 2.52),
 (-2.52, 28.52),
 (-2.52, 29.08),
 (-29.08, 2.52),
 (-29.65, 2.52),
 (-2.52, 29.65),
 (-2.52, 30.21),
 (-30.21, 2.52),
 (-30.78, 2.52),
 (-2.52, 30.78),
 (-2.52, 31.35),
 (-31.35, 2.52),
 (-31.91, 2.52),
 (-2.52, 31.91),
 (-2.52, 32.48),
 (-32.48, 2.52),
 (-33.04, 2.52),
 (-2.52, 33.04),
 (-2.52, 33.61),
 (-33.61, 2.52),
 (-34.17, 2.52),
 (-2.52, 34.17),
 (-2.52, 34.74),
 (-34.74, 2.52),
 (-35.31, 2.52),
 (-2.52, 35.31),
 (-2.52, 35.87),
 (-35.87, 2.52),
 (-36.44, 2.52),
 (-2.52, 36.44),
 (-2.52, 37.0),
 (-37.0, 2.52),
 (-37.57, 2.52),
 (-2.52, 37.57),
 (-2.52, 38.13),
 (-38.13, 2.52),
 (-38.7, 2.52),
 (-2.52, 38.7),
 (-2.52, 39.27),
 (-39.26, 2.52),
 (-39.83, 2.52),
 (-2.52, 39.83),
 (-2.52, 40.4),
 (-40.4, 2.52),
 (-40.96, 2.52),
 (-2.52, 40.96),
 (-2.52, 41.53),
 (-41.53, 2.52),
 (-42.09, 2.52),
 (-2.52, 42.09),
 (-2.52, 42.66),
 (-42.66, 2.52),
 (-43.22, 2.52),
 (-2.52, 43.23),
 (-2.52, 43.79),
 (-43.79, 2.52)]
#x=[ 106.664, 106.606, 106.6, 106.639, 106.666, 106.757, 106.971, 107.008, 107.228, 107.274]
#y=[ 108.645, 109.075, 110.799, 111.224, 111.377, 111.686, 112.131, 112.192, 112.49, 112.541]


#x=[ 113.334, 113.183, 112.977, 112.757, 112.391, 112.023, 111.682, 111.264, 110.8, 109.3, 109.2, 108.431, 108.046, 107.748, 107.491, 107.282, 107.152, 107.048, 107.003, 107.0, 107.037, 107.059, 107.14, 107.33, 107.55, 107.819, 108.126, 108.401, 108.757, 109.124]
#y=[ 108.623, 108.171, 107.785, 107.491, 107.149, 106.909, 106.758, 106.645, 106.6, 106.6, 106.6, 107.14, 107.33, 107.55, 107.819, 108.126, 108.401, 108.757, 109.124, 110.8, 111.186, 111.304, 111.569, 111.954, 112.252, 112.509, 112.718, 112.848, 112.952, 112.997]


#points = [(x[i],y[i]) for i in range(len(x))]
x= [i[0] for i in points]
y= [i[1] for i in points]

def droite(A,B):
    if A == B:
        return None
    (xA , yA) = A
    (xB , yB) = B
    if xA == xB:
        return (1 , 0 , -xA)
    a = - (yB - yA)/(xB - xA)
    c = -a*xA - yA
    return (a , 1 , c)



def appartien( droite , point):
    print(droite)
    (a , b , c) = droite
    (xA , yA ) = point
    #return a*xA + b*yA + c == 0
    return abs(a*xA + b*yA + c) <= 0.15
def distance(A,B):
    (xA , yA) = A
    (xB , yB) = B
    return math.sqrt((xA-xB)**2 + (yB-yA)**2)

 
def reducepointsv1(points, precision):
    nPoints = list()
    nPoints.append(points[0])
    print(nPoints)
    for i in range(1,len(points)-1):
        if points[i-1] == points[i]:
            continue
        (a , b , c) = droite( points[i-1], points[i])
        if appartien((a , b , c), points[i+1]):
            if points[i+1]==points[-1]:
                nPoints.append(points[-1])
            continue
        else :
            if points[i+1]==points[-1]:
                nPoints.append(points[-1])
                nPoints.append(points[i])
            else : 
                nPoints.append(points[i])
            
    return nPoints
 
pp = reducepointsv1(points, 2)




x1=[i[0] for i in pp ]
y1= [i[1] for i in pp]



plt.plot(x, y, 'rx')
plt.plot(x1, y1, 'b.')